"""
Django settings for config config.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import json
import os
from os.path import abspath, dirname, join
from django.core.exceptions import ImproperlyConfigured
import datetime

# Build paths inside the config like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/


"""
                    secret file settings.
        요기서 자세한 비밀키나, 프로젝트 전체적인 필요한 내부 중요한 값들을 명시해둠.
"""
secrets_file = join(BASE_DIR, './secrets.json')
with open(secrets_file) as f:
    secrets = json.loads(f.read())


def get_secret(setting, secrets=secrets):
    try:
        return secrets[setting]
    except KeyError:
        error_msg = "Set the {} environment variable".format(setting)
        raise ImproperlyConfigured(error_msg)


SECRET_KEY = get_secret('SECRET_KEY')

# TODO: 추후 변경, 나중에 좀더 공부해서 변경을 할 수 있어야 한다.
ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 외부 Application
    'rest_framework',
    'corsheaders',
    'storages',  # AWS S# 관련 APP
    'django_crontab',  # 일정 시간에 자동으로, Reminder 앱을 자동으로 할 수 있도록 하는 것.

    # 내부 Application
    'core',
    'record',
    'reminder',
    'notice',
    'shop',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

"""
    AUTH_USER_MODEL -> 기존의 USER MODEL 을 바꾸어준다. core.Profile 로 이동
    REST_FRAMEWORK -> JWT 를 사용해서 인증을 하는 방식 이라는 것을 명시해둔다. 
    JWT_AUTH -> jwt 의 만료기간에 대해서 명시를 해두었다.
"""
AUTH_USER_MODEL = "core.Profile"

REST_FRAMEWORK = {
    # Global Error Handler 정의 해둔 곳
    'EXCEPTION_HANDLER': 'core.ERROR.error_handler.custom_exception_handler',
    'DEFAULT_PERMISSION_CLASSES': (
        'config.permissions.MyIsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

JWT_AUTH = {
    'JWT_ALLOW_REFRESH': True,
    # access token
    'JWT_EXPIRATION_DELTA': datetime.timedelta(hours=1),
    # refresh token
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=2),
}

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = False

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
)

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

"""
                Email Send 설정
"""
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = get_secret('EMAIL_HOST')
EMAIL_HOST_USER = get_secret('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = get_secret('EMAIL_HOST_PASSWORD')
EMAIL_PORT = get_secret('EMAIL_PORT')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Reminder Crontab

CRONJOBS = [
    ('0 0 * * *', 'reminder.cron.create_reminder',
    '>>' + os.path.join(BASE_DIR, 'cron.log')),
]
CRONTAB_COMMAND_SUFFIX = '2>&1'